initSidebarItems({"fn":[["as_bytes","Convert reference to bytes slice."]],"struct":[["Element","Aligning wrapper. Elements for array are aligned to 16 bytes (size of vec4) at least."],["bmat2x2","Matrix of 2 x 2 boolean values."],["bmat2x3","Matrix of 2 x 3 boolean values."],["bmat2x4","Matrix of 2 x 4 boolean values."],["bmat3x2","Matrix of 3 x 2 boolean values."],["bmat3x3","Matrix of 3 x 3 boolean values."],["bmat3x4","Matrix of 3 x 4 boolean values."],["bmat4x2","Matrix of 4 x 2 boolean values."],["bmat4x3","Matrix of 4 x 3 boolean values."],["bmat4x4","Matrix of 4 x 4 boolean values."],["boolean","Boolean value."],["bvec2","Vector of 2 `boolean` values. `foo: bvec2` is equivalent to glsl's `bvec2 foo;`"],["bvec3","Vector of 3 `boolean` values. `foo: bvec3` is equivalent to glsl's `bvec3 foo;`"],["bvec4","Vector of 4 `boolean` values. `foo: bvec4` is equivalent to glsl's `bvec4 foo;`"],["dmat2x2","Matrix of 2 x 2 double-precision floating-point values."],["dmat2x3","Matrix of 2 x 3 double-precision floating-point values."],["dmat2x4","Matrix of 2 x 4 double-precision floating-point values."],["dmat3x2","Matrix of 3 x 2 double-precision floating-point values."],["dmat3x3","Matrix of 3 x 3 double-precision floating-point values."],["dmat3x4","Matrix of 3 x 4 double-precision floating-point values."],["dmat4x2","Matrix of 4 x 2 double-precision floating-point values."],["dmat4x3","Matrix of 4 x 3 double-precision floating-point values."],["dmat4x4","Matrix of 4 x 4 double-precision floating-point values."],["dvec2","Vector of 2 `double` value. `foo: dvec2` is equivalent to glsl's `dvec2 foo;`"],["dvec3","Vector of 3 `double` value. `foo: dvec3` is equivalent to glsl's `dvec3 foo;`"],["dvec4","Vector of 4 `double` value. `foo: dvec4` is equivalent to glsl's `dvec4 foo;`"],["imat2x2","Matrix of 2 x 2 signed integer values."],["imat2x3","Matrix of 2 x 3 signed integer values."],["imat2x4","Matrix of 2 x 4 signed integer values."],["imat3x2","Matrix of 3 x 2 signed integer values."],["imat3x3","Matrix of 3 x 3 signed integer values."],["imat3x4","Matrix of 3 x 4 signed integer values."],["imat4x2","Matrix of 4 x 2 signed integer values."],["imat4x3","Matrix of 4 x 3 signed integer values."],["imat4x4","Matrix of 4 x 4 signed integer values."],["ivec2","Vector of 2 `int` values. `foo: ivec2` is equivalent to glsl's `ivec2 foo;`"],["ivec3","Vector of 3 `int` values. `foo: ivec3` is equivalent to glsl's `ivec3 foo;`"],["ivec4","Vector of 4 `int` values. `foo: ivec4` is equivalent to glsl's `ivec4 foo;`"],["mat2x2","Matrix of 2 x 2 floating-point values."],["mat2x3","Matrix of 2 x 3 floating-point values."],["mat2x4","Matrix of 2 x 4 floating-point values."],["mat3x2","Matrix of 3 x 2 floating-point values."],["mat3x3","Matrix of 3 x 3 floating-point values."],["mat3x4","Matrix of 3 x 4 floating-point values."],["mat4x2","Matrix of 4 x 2 floating-point values."],["mat4x3","Matrix of 4 x 3 floating-point values."],["mat4x4","Matrix of 4 x 4 floating-point values."],["umat2x2","Matrix of 2 x 2 unsiged integer values."],["umat2x3","Matrix of 2 x 3 unsiged integer values."],["umat2x4","Matrix of 2 x 4 unsiged integer values."],["umat3x2","Matrix of 3 x 2 unsiged integer values."],["umat3x3","Matrix of 3 x 3 unsiged integer values."],["umat3x4","Matrix of 3 x 4 unsiged integer values."],["umat4x2","Matrix of 4 x 2 unsiged integer values."],["umat4x3","Matrix of 4 x 3 unsiged integer values."],["umat4x4","Matrix of 4 x 4 unsiged integer values."],["uvec2","Vector of 2 `uint` values. `foo: uvec2` is equivalent to glsl's `uvec2 foo;`"],["uvec3","Vector of 3 `uint` values. `foo: uvec3` is equivalent to glsl's `uvec3 foo;`"],["uvec4","Vector of 4 `uint` values. `foo: uvec4` is equivalent to glsl's `uvec4 foo;`"],["vec2","Vector of 2 `float` values. `foo: vec2` is equivalent to glsl's `vec2 foo;`"],["vec3","Vector of 3 `float` values. `foo: vec3` is equivalent to glsl's `vec3 foo;`"],["vec4","Vector of 4 `float` values. `foo: vec4` is equivalent to glsl's `vec4 foo;`"]],"trait":[["AsStd140","Structure to transform data from rust's structure to the raw data ready to upload to UBO. Users should prefer to use `derive(AsStd140)` instead of implementing this manually."],["Std140","Special marker trait implemented only for `std140` types."]],"type":[["bmat2","Matrix of 2 x 2 boolean values."],["bmat3","Matrix of 3 x 3 boolean values."],["bmat4","Matrix of 4 x 4 boolean values."],["dmat2","Matrix of 2 x 2 double-precision floating-point values."],["dmat3","Matrix of 3 x 3 double-precision floating-point values."],["dmat4","Matrix of 4 x 4 double-precision floating-point values."],["double","Double-precision floating-point value."],["float","floating-point value."],["imat2","Matrix of 2 x 2 signed integer values."],["imat3","Matrix of 3 x 3 signed integer values."],["imat4","Matrix of 4 x 4 signed integer values."],["int","Signed integer value."],["mat2","Matrix of 2 x 2 floating-point values."],["mat3","Matrix of 3 x 3 floating-point values."],["mat4","Matrix of 4 x 4 floating-point values."],["uint","Unsigned integer value."],["umat2","Matrix of 2 x 2 unsiged integer values."],["umat3","Matrix of 3 x 3 unsiged integer values."],["umat4","Matrix of 4 x 4 unsiged integer values."]]});