initSidebarItems({"fn":[["contains_tag","Returns whether an item's attributes contains a given `#[namespace(tag)]` attribute."],["format_path","Returns a `Path` as a String without whitespace between tokens."],["ident_concat","Returns an `Ident` by concatenating `String` representations."],["meta_list_contains","Returns whether the `MetaList` contains the specified `NestedMeta`."],["namespace_meta_lists","Returns the meta lists of the form: `#[namespace(..)]`."],["namespace_meta_lists_iter","Returns the meta lists of the form: `#[namespace(..)]`."],["namespace_parameter","Returns the parameter from `#[namespace(parameter)]`."],["namespace_parameters","Returns the parameters from `#[namespace(param1, param2, ..)]`."],["nested_meta_to_path","Returns the `Path` of a nested meta. If it is a literal, `None` is returned."],["tag_meta_lists_iter","Returns an iterator over meta lists from `#[namespace(tag(..))]`."],["tag_meta_lists_owned_iter","Returns an iterator over meta lists from `#[namespace(tag(..))]`."],["tag_parameter","Returns the parameter from `#[namespace(tag(parameter))]`."],["tag_parameters","Returns the parameters from `#[namespace(tag(param1, param2, ..))]`."]],"trait":[["DeriveInputExt","Functions to make it ergonomic to work with `struct` ASTs."],["DeriveInputNewtypeExt","Functions to make it ergonomic to work with newtype `struct` ASTs."],["DeriveInputStructExt","Functions to make it ergonomic to work with `struct` ASTs."],["FieldExt","Functions to make it ergonomic to inspect `Field`s and their attributes."],["FieldsExt","Functions to make it ergonomic to work with `Fields`."],["FieldsNamedAppend","Indicates this type may have `FieldsNamed` appended to it."],["FieldsUnnamedAppend","Indicates this type may have `FieldsUnnamed` appended to it."],["IdentExt","Convenience methods on `Ident`s."]]});